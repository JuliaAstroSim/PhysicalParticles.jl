var documenterSearchIndex = {"docs":
[{"location":"manual/Extent/#Extent","page":"Extent","title":"Extent","text":"","category":"section"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"You can get Extent of an array of mathical vectors or particles by calling extent functions:","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"using PhysicalParticles\np = [Ball(PVector(-1.0u\"m\", 1.0u\"m\", 1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1.0u\"kg\", 1),\n     Ball(PVector(1.0u\"m\", -1.0u\"m\", -1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1000.0u\"g\", 2)]\nextent(p)","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"or by comparing two Extents and even array of Extents:","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"# 5 methods for generic function \"extent\":\n  [1] extent(a::Array{T,N}) where {N, T<:Union{AbstractParticle2D, PVector2D}}\n  [2] extent(a::Array{T,N}) where {N, T<:Union{AbstractParticle3D, PVector}}\n  [3] extent(a::Extent2D, b::Extent2D)\n  [4] extent(a::Extent, b::Extent)\n  [5] extent(a::Array{T,N} where N) where T<:AbstractExtent\n","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"For particles with masses, compute the mass center with:","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"mass_center(p)","category":"page"},{"location":"manual/Extent/#Minimum,-maximum-and-center","page":"Extent","title":"Minimum, maximum and center","text":"","category":"section"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"The computation of Extents are based on a series of small functions, we use p defined in previous section to demonstrate:","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"center(p)","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"We have implemented max_x, max_y, max_z, min_x, min_y, min_z, center, center_x, center_y, center_z for both points and particles. You could simply infer their functions by name.","category":"page"},{"location":"manual/StructArrays/#StructArrays","page":"StructArrays","title":"StructArrays","text":"","category":"section"},{"location":"manual/StructArrays/","page":"StructArrays","title":"StructArrays","text":"StructArray provides a more efficient way to iterate on a field of particles:","category":"page"},{"location":"manual/StructArrays/","page":"StructArrays","title":"StructArrays","text":"sArray = [Star() for i in 1:5]\nsStruct = StructArray(sArray)\n\nsStruct.Mass[1] = 1000.0  # Easier to set properties, and even faster!\n\nassign_particles(sStruct, :Pos, randn_pvector(5))\n\nmean(sStruct.Pos)","category":"page"},{"location":"lib/Types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"lib/Types/","page":"Types","title":"Types","text":"Pages = [\"Types.md\"]","category":"page"},{"location":"lib/Types/","page":"Types","title":"Types","text":"AbstractPoint\nPVector\nPVector2D\nuAstro\nuSI\nuCGS\nuDefaults\nMassless\nMassless2D\nBall\nBall2D\nStar\nStar2D\nSPHGas\nSPHGas2D\nExtent\nExtent2D\nCollection\nConstant\nAbstractDataDimension","category":"page"},{"location":"lib/Types/#PhysicalParticles.AbstractPoint","page":"Types","title":"PhysicalParticles.AbstractPoint","text":"AbstractPoint\n\nTop level mathematical vector type defined in PhysicalParticles.jl It is named to distinguish from the built-in type AbstractVector\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.PVector","page":"Types","title":"PhysicalParticles.PVector","text":"struct PVector{T<:Number} <: AbstractPoint3D{T}\n\nFields\n\nx::T\ny::T\nz::T\n\nExamples\n\njulia> PVector()\nPVector{Float64}(0.0, 0.0, 0.0)\n\njulia> PVector(u\"m\")\nPVector(0.0 m, 0.0 m, 0.0 m)\n\njulia> PVector() * im\nPVector{ComplexF64}(0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im)\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.PVector2D","page":"Types","title":"PhysicalParticles.PVector2D","text":"struct PVector2D{T<:Number} <: AbstractPoint2D{T}\n\nFields\n\nx::T\ny::T\n\nExamples\n\njulia> PVector2D()\nPVector2D{Float64}(0.0, 0.0)\n\njulia> PVector2D(u\"m\")\nPVector2D(0.0 m, 0.0 m)\n\njulia> PVector(1.0im, 2.0 + 3.0im)\nPVector2D{ComplexF64}(0.0 + 1.0im, 2.0 + 3.0im)\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.uAstro","page":"Types","title":"PhysicalParticles.uAstro","text":"Default Astro units: kpc,Gyr,A,K,cd,Msun,mol\n\n\n\n\n\n","category":"constant"},{"location":"lib/Types/#PhysicalParticles.uSI","page":"Types","title":"PhysicalParticles.uSI","text":"Default SI units: m,s,A,K,cd,kg,mol\n\n\n\n\n\n","category":"constant"},{"location":"lib/Types/#PhysicalParticles.uCGS","page":"Types","title":"PhysicalParticles.uCGS","text":"Default CGS units: cm,s,A,K,cd,g,mol\n\n\n\n\n\n","category":"constant"},{"location":"lib/Types/#PhysicalParticles.uDefaults","page":"Types","title":"PhysicalParticles.uDefaults","text":"Default units: m,s,A,K,cd,kg,mol\n\n\n\n\n\n","category":"constant"},{"location":"lib/Types/#PhysicalParticles.Massless","page":"Types","title":"PhysicalParticles.Massless","text":"struct Massless{P, V, I<:Integer} <: AbstractParticle3D\n\nPos::PVector{P} where P\nVel::PVector{V} where V\nID::Integer\n\n3D particle type without mass.\n\nExamples\n\njulia> Massless()\nMassless 0: Pos = PVector{Float64}(0.0, 0.0, 0.0), Vel = PVector{Float64}(0.0, 0.0, 0.0)\n\njulia> Massless(uAstro)\nMassless 0: Pos = PVector(0.0 kpc, 0.0 kpc, 0.0 kpc), Vel = PVector(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1)\n\njulia> Massless(uSI, id = 1)\nMassless 1: Pos = PVector(0.0 m, 0.0 m, 0.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1)\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Massless2D","page":"Types","title":"PhysicalParticles.Massless2D","text":"struct Massless2D{P, V, I<:Integer} <: AbstractParticle2D\n\nPos::PVector2D{P} where P\nVel::PVector2D{V} where V\nID::Integer\n\n2D particle type without mass.\n\nExamples\n\njulia> Massless2D()\nMassless 0: Pos = PVector2D{Float64}(0.0, 0.0), Vel = PVector2D{Float64}(0.0, 0.0)\n\njulia> Massless2D(uAstro)\nMassless 0: Pos = PVector2D(0.0 kpc, 0.0 kpc), Vel = PVector2D(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1)\n\njulia> Massless2D(uSI, id = 1)\nMassless 1: Pos = PVector2D(0.0 m, 0.0 m), Vel = PVector2D(0.0 m s^-1, 0.0 m s^-1)\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Ball","page":"Types","title":"PhysicalParticles.Ball","text":"struct Ball{P, V, A, M, I<:Integer} <: AbstractParticle3D\n\nPos::PVector{P} where P\nVel::PVector{V} where V\nAcc::PVector{A} where A\nMass::Any\nID::Integer\n\nBasic 3D particle type.\n\nExamples\n\njulia> Ball()\nBall 0: Pos = PVector{Float64}(0.0, 0.0, 0.0), Vel = PVector{Float64}(0.0, 0.0, 0.0), Acc = PVector{Float64}(0.0, 0.0, 0.0), Mass = 0.0\n\njulia> Ball(uAstro)\nBall 0: Pos = PVector(0.0 kpc, 0.0 kpc, 0.0 kpc), Vel = PVector(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), Acc = PVector(0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2), Mass = 0.0 M⊙\n\njulia> Ball(uSI, id = 1)\nBall 1: Pos = PVector(0.0 m, 0.0 m, 0.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Ball2D","page":"Types","title":"PhysicalParticles.Ball2D","text":"struct Ball2D{P, V, A, M, I<:Integer} <: AbstractParticle2D\n\nPos::PVector2D{P} where P\nVel::PVector2D{V} where V\nAcc::PVector2D{A} where A\nMass::Any\nID::Integer\n\nBasic 2D particle type.\n\nExamples\n\njulia> Ball2D()\nBall 0: Pos = PVector2D{Float64}(0.0, 0.0), Vel = PVector2D{Float64}(0.0, 0.0), Acc = PVector2D{Float64}(0.0, 0.0), Mass = 0.0\n\njulia> Ball2D(uAstro)\nBall 0: Pos = PVector2D(0.0 kpc, 0.0 kpc), Vel = PVector2D(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), Acc = PVector2D(0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2), Mass = 0.0 M⊙\n\njulia> Ball2D(uSI, id = 1)\nBall 1: Pos = PVector2D(0.0 m, 0.0 m), Vel = PVector2D(0.0 m s^-1, 0.0 m s^-1), Acc = PVector2D(0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Star","page":"Types","title":"PhysicalParticles.Star","text":"struct Star{P, V, A, M, E, I<:Integer} <: AbstractParticle3D\n\nPos::PVector{P} where P\nVel::PVector{V} where V\nAcc::PVector{A} where A\nMass::Any\nID::Integer\nCollection::Collection\nTi_endstep::Integer\nNext integer step on the timeline.\nTi_begstep::Integer\nPresent integer step on the timeline.\nGravCost::Integer\nFor each two-particle interaction, GravCost += 1\nPotential::Any\nParticle potential in the force field\nOldAcc::Any\nSave the normalization of acceleration of last step. Useful in Tree n-body method.\n\n3D Particle type designed for AstroSim.jl.\n\nCollection is an Enum defined in the same way with Gadget2, but start from 1.\n\nExamples\n\njulia> Star()\nStar 0 GAS: Pos = PVector{Float64}(0.0, 0.0, 0.0), Vel = PVector{Float64}(0.0, 0.0, 0.0), Acc = PVector{Float64}(0.0, 0.0, 0.0), Mass = 0.0, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0, OldAcc = 0.0, Entropy = 0.0, Density = 0.0, Hsml = 0.0, Left = 0.0, Right = 0.0, NumNgbFound = 0, RotVel = PVector{Float64}(0.0, 0.0, 0.0), DivVel = 0.0, CurlVel = 0.0, dHsmlRho = 0.0, Pressure = 0.0, DtEntropy = 0.0, MaxSignalVel = 0.0\n\njulia> Star(uAstro, collection = BLACKHOLE)\nStar 0 BLACKHOLE: Pos = PVector(0.0 kpc, 0.0 kpc, 0.0 kpc), Vel = PVector(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), Acc = PVector(0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2), Mass = 0.0 M⊙, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0 kpc^2 M⊙ Gyr^-2, OldAcc = 0.0 kpc Gyr^-2, Entropy = 0.0 kpc^2 M⊙ K^-1 Gyr^-2, Density = 0.0 M⊙ kpc^-3, Hsml = 0.0 kpc, Left = 0.0, Right = 0.0, NumNgbFound = 0, RotVel = PVector(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), DivVel = 0.0 Gyr^-1, CurlVel = 0.0 Gyr^-1, dHsmlRho = 0.0 kpc, Pressure = 0.0 M⊙ kpc^-1 Gyr^-2, DtEntropy = 0.0 kpc^2 M⊙ K^-1 Gyr^-3, MaxSignalVel = 0.0 kpc Gyr^-1\n\njulia> Star(uSI, id = 1)\nStar 1 GAS: Pos = PVector(0.0 m, 0.0 m, 0.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0 kg m^2 s^-2, OldAcc = 0.0 m s^-2, Entropy = 0.0 kg m^2 K^-1 s^-2, Density = 0.0 kg m^-3, Hsml = 0.0 m, Left = 0.0, Right = 0.0, NumNgbFound = 0, RotVel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), DivVel = 0.0 s^-1, CurlVel = 0.0 s^-1, dHsmlRho = 0.0 m, Pressure = 0.0 kg m^-1 s^-2, DtEntropy = 0.0 \nkg m^2 K^-1 s^-3, MaxSignalVel = 0.0 m s^-1\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Star2D","page":"Types","title":"PhysicalParticles.Star2D","text":"struct Star2D{P, V, A, M, E, I<:Integer} <: AbstractParticle2D\n\nPos::PVector2D{P} where P\nVel::PVector2D{V} where V\nAcc::PVector2D{A} where A\nMass::Any\nID::Integer\nCollection::Collection\nTi_endstep::Integer\nNext integer step on the timeline.\nTi_begstep::Integer\nPresent integer step on the timeline.\nGravCost::Integer\nFor each two-particle interaction, GravCost += 1\nPotential::Any\nParticle potential in the force field\nOldAcc::Any\nSave the normalization of acceleration of last step. Useful in Tree n-body method\n\n2D Particle type designed for AstroSim.jl. Collection is an Enum defined in the same way with Gadget2, with index starting from 1.\n\nExamples\n\njulia> Star2D()\nSPHGas 0 GAS: Pos = PVector2D{Float64}(0.0, 0.0), Vel = PVector2D{Float64}(0.0, 0.0), Acc = PVector2D{Float64}(0.0, 0.0), Mass = 0.0, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0, OldAcc = 0.0, Entropy = 0.0, Density = 0.0, Hsml = 0.0, Left = 0.0, Right = 0.0, NumNgbFound = 0, RotVel = PVector2D{Float64}(0.0, 0.0), DivVel = 0.0, CurlVel = 0.0, dHsmlRho = 0.0, Pressure = 0.0, DtEntropy = 0.0, MaxSignalVel = 0.0\n\njulia> Star2D(uAstro, collection = BLACKHOLE)\nSPHGas 0 BLACKHOLE: Pos = PVector2D(0.0 kpc, 0.0 kpc), Vel = PVector2D(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), Acc = PVector2D(0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2), Mass = 0.0 M⊙, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0 kpc^2 M⊙ Gyr^-2, OldAcc = 0.0 kpc Gyr^-2, \nEntropy = 0.0 kpc^2 M⊙ K^-1 Gyr^-2, Density = 0.0 M⊙ kpc^-2, Hsml = 0.0 kpc, Left = 0.0, Right = 0.0, NumNgbFound = 0, RotVel = PVector2D(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), DivVel = 0.0 Gyr^-1, CurlVel = 0.0 Gyr^-1, dHsmlRho = 0.0 kpc, Pressure = 0.0 M⊙ kpc^-1 Gyr^-2, DtEntropy = 0.0 kpc^2 M⊙ K^-1 Gyr^-3, MaxSignalVel = 0.0 kpc Gyr^-1\n\njulia> Star2D(uSI, id = 1)\nSPHGas 1 GAS: Pos = PVector2D(0.0 m, 0.0 m), Vel = PVector2D(0.0 m s^-1, 0.0 m s^-1), Acc = PVector2D(0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0 kg m^2 s^-2, OldAcc = 0.0 m s^-2, Entropy = 0.0 kg m^2 K^-1 s^-2, Density = 0.0 kg m^-2, Hsml = 0.0 m, Left = 0.0, Right = 0.0, NumNgbFound = 0, RotVel = PVector2D(0.0 m s^-1, 0.0 m s^-1), DivVel = 0.0 s^-1, CurlVel = 0.0 s^-1, dHsmlRho = 0.0 m, Pressure = 0.0 kg m^-1 s^-2, DtEntropy = 0.0 kg m^2 K^-1 s^-3, MaxSignalVel = 0.0 m s^-1\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Extent","page":"Types","title":"PhysicalParticles.Extent","text":"struct Extent{T<:Number} <: AbstractExtent3D{T}\n\nCould be constructed by function extent\n\nFields\n\nxMin::T\nxMax::T\nyMin::T\nyMax::T\nzMin::T\nzMax::T\nSideLength::T\nCenter::PVector{T}\nCorner::PVector{T} :  PVector(xMin, yMin, zMin)\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Extent2D","page":"Types","title":"PhysicalParticles.Extent2D","text":"struct Extent2D{T<:Number} <: AbstractExtent2D{T}\n\nCould be constructed by function extent\n\nFields\n\nxMin::T\nxMax::T\nyMin::T\nyMax::T\nSideLength::T\nCenter::PVector2D{T}\nCorner::PVector2D{T} : PVector2D(xMin, yMin)\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Collection","page":"Types","title":"PhysicalParticles.Collection","text":"Enum Collection\n\nParticle types defined in Gadget2. However, in julia, it is better to start from 1:\n\nGAS::Collection       = 1\nHALO::Collection      = 2\nDISK::Collection      = 3\nBULGE::Collection     = 4\nSTAR::Collection      = 5\nBLACKHOLE::Collection = 6\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.Constant","page":"Types","title":"PhysicalParticles.Constant","text":"function Constant(units = uAstro; kw...)\n\nConstruct an immutable struct storing basic physical constants corresponding to `units` (default is `uAstro`).\n\nKeywords\n\nc:    Speed of light\nG:    Newtonian constant of gravitation\nm_e:  Electron mass\nm_n:  Neutron mass\nm_p:  Protron mass\nk_B:  Kelvin-Boltzmann constant\nACC0: Modified gravitational acceleration constant\n\nExamples\n\nConstant()\nConstant(uSI)\nConstant(uCGS)\nusing Unitful\nustrip(Constant())\n\n\n\n\n\nConstant(::Type{BigFloat}, units::Vector{Unitful.FreeUnits{N, D, nothing} where D where N})\n\nConstruct an immutable struct storing basic physical constants in BigFloat corresponding to units (default is uAstro).\n\n\n\n\n\nConstant(::Type{Measurement}, units::Vector{Unitful.FreeUnits{N, D, nothing} where D where N})\n\nConstruct an immutable struct storing basic physical constants in Measurement corresponding to units (default is uAstro).\n\n\n\n\n\n","category":"type"},{"location":"lib/Types/#PhysicalParticles.AbstractDataDimension","page":"Types","title":"PhysicalParticles.AbstractDataDimension","text":"abstract type AbstractDataDimension\n\nAbstract type for traits. see datadimension for more info.\n\nSubtypes\n\nPhysical2D\nPhysical3D\nUnitless2D\nUnitless3D\n\n\n\n\n\n","category":"type"},{"location":"manual/Conversion/#Conversion","page":"Conversion","title":"Conversion","text":"","category":"section"},{"location":"manual/Conversion/#Conversion-from-Arrays","page":"Conversion","title":"Conversion from Arrays","text":"","category":"section"},{"location":"manual/Conversion/","page":"Conversion","title":"Conversion","text":"pconvert is smart enough to handle 2D and 3D vectors at same time:","category":"page"},{"location":"manual/Conversion/","page":"Conversion","title":"Conversion","text":"using PhysicalParticles\npconvert([1.0, 2.0])\npconvert([1.0, 2.0, 3.0])\npconvert([1.0, 2.0, 3.0, 4.0])\na = pconvert([1.0 3.0; \n              2.0 4.0])\npconvert([1.0 4.0;\n          2.0 5.0;\n          3.0 6.0])\n","category":"page"},{"location":"manual/Conversion/#Assign-from-Arrays","page":"Conversion","title":"Assign from Arrays","text":"","category":"section"},{"location":"manual/Conversion/","page":"Conversion","title":"Conversion","text":"assign_particles takes in three paremeters: particles, symbol and points. Assignment of :Pos, :Vel and :Acc is enough for simulation tasks:","category":"page"},{"location":"manual/Conversion/","page":"Conversion","title":"Conversion","text":"ppoints = rand(PVector{Float64}, 3) * u\"m\"\np_Ball = [Ball(uSI) for i=1:3]\nassign_particles(p_Ball, :Pos, pu)\np_Ball","category":"page"},{"location":"manual/Units/#Units","page":"Units","title":"Units","text":"","category":"section"},{"location":"manual/Units/","page":"Units","title":"Units","text":"Units are supported by Unitful.jl and UnitfulAstro.jl","category":"page"},{"location":"manual/Units/#Default-Units","page":"Units","title":"Default Units","text":"","category":"section"},{"location":"manual/Units/","page":"Units","title":"Units","text":"You could set preferred units by","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"const uSI = u\"m,s,A,K,cd,kg,mol\"\npreferunits(uSI)","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"or simply call si(), astro(), ugadget2() and cgs() are implemented in the same way.","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"This would affect unit promotions in Unitful package and default outputs in related packages, by setting Unitful.promotion and PhysicalParticles.uDefaults respectively.","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"Examples to get basic units:","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"using PhysicalParticles\ngetunits()\ngetunits(uAstro)\ngetunits(uGadget2)\ngetunits(nothing)\ngetuLength()\ngetuTime(uSI)\ngetuCurrent(uCGS)\ngetuTemperature(nothing)\ngetuLuminosity()\ngetuMass()\ngetuAmount()","category":"page"},{"location":"manual/Units/#Constants","page":"Units","title":"Constants","text":"","category":"section"},{"location":"manual/Units/","page":"Units","title":"Units","text":"Physical constants are imported from CODATA2018 supported by PhysicalConstants.jl. However, constants in PhysicalConstants may cause type error if they are not converted to default units.","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"To prevent this problem, construct an immutable struct Constant corresponding to the provided units:","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"using PhysicalParticles\nConstant()\nConstant(uSI)\nConstant(uCGS)\nusing Unitful\nustrip(Constant())","category":"page"},{"location":"manual/Units/#Zerovalues","page":"Units","title":"Zerovalues","text":"","category":"section"},{"location":"manual/Units/","page":"Units","title":"Units","text":"ZeroValue is useful for accumulated summation, array initialization, etc. Examples:","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"using PhysicalParticles\nZeroValue(nothing)\nZeroValue()\nZeroValue(uSI)\nZeroValue(uCGS)\nZeroValue(Measurement)\nZeroValue(BigFloat)","category":"page"},{"location":"manual/PVector/#PVector","page":"PVector","title":"PVector","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"All of the sub-types of Number and Quantity are supported. In general it works as we expected whereas there are too many possibilities to foresee. Mathematically vector operations, linear algebra, array conversions, neighbor searching, etc. are well documented in corresponding sections.","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"The vector types are immutable out of performance reason. ","category":"page"},{"location":"manual/PVector/#PVector-and-PVector2D","page":"PVector","title":"PVector and PVector2D","text":"","category":"section"},{"location":"manual/PVector/#Constructor","page":"PVector","title":"Constructor","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"It is assumed that 3D vectors are used more often, so we choose PVector to represent 3D vectors and provide user-friendly functions to avoid errors in case you missed suffix 2D:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"using PhysicalParticles\nPVector(1.0, 2.0)\nPVector(2.0, 3.0, u\"m\")","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"The default constructors of PVector are still 3d-version:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"PVector()\nPVector(u\"m\")","category":"page"},{"location":"manual/PVector/#Basic-Operators","page":"PVector","title":"Basic Operators","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"Basic maths are well support by overriding Base: +, -, *, /, and array operations are supported by overriding Base: length, iterate","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"a = pconvert(ones(3))\nb = pconvert(ones(3)) * 2\na + b\na * b\nnorm(a)\nnorm(a) == sqrt(3)\nnormalize(a)\nnormalize(a) == a / sqrt(3)\ncross(a, b)\ndot(a,b) == *(a,b)\nc = pconvert(ones(3)) * 1.0u\"m\"\nc * a","category":"page"},{"location":"manual/PVector/#More-types,-more-possibilities","page":"PVector","title":"More types, more possibilities","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"T<:Number gives us a whole world to try out new vector operations. As we mentioned above, the build-in type operation and promotion schemes have guaranteed most of operations would be correct:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"a = PVector(1.0, 1.0, 1.0) * im\na * PVector(1, 2, 3)\nnorm(a)\nb = PVector(1.0f0, 2.0f0)\nb * 2\nb * 2.0\nPVector(BigFloat)\nPVector2D(BigInt, u\"m\")","category":"page"},{"location":"manual/PVector/#LinearAlgebra","page":"PVector","title":"LinearAlgebra","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"norm, normalize, dot, cross from LinearAlgebra module are overloaded.","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"However, when it comes to Quantity, some wierd things would happen:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"using Unitful\nsqrt(1.0u\"km\" * 1000.0u\"m\")\nsqrt(upreferred(1.0u\"km\" * 1000.0u\"m\"))\n1.0u\"km\" / sqrt(upreferred(1.0u\"km\" * 1.0u\"km\"))","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"To avoid this, we have to use upreferred in both norm and normalize:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"@inline norm(p::PVector2D) = sqrt(upreferred(p * p))\n@inline normalize(p::PVector2D) = (n = ustrip(norm(p)); return PVector2D(upreferred(p.x/n), upreferred(p.y/n)))\n\n@inline norm(p::PVector) = sqrt(upreferred(p * p))\n@inline normalize(p::PVector) = (n = ustrip(norm(p)); return PVector(upreferred(p.x/n), upreferred(p.y/n), upreferred(p.z/n)))","category":"page"},{"location":"manual/PVector/#uconvert,-ustrip,-zero,-one","page":"PVector","title":"uconvert, ustrip, zero, one","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"These would be useful when you cannot predict the type of input.","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"p = PVector(2.0, 2.0, 2.0, u\"km\")\nuconvert(u\"m\", p)\nustrip(u\"m\", p)\nustrip(p)\none(u\"m\", p)\none(p)\nzero(u\"m\", p)\nzero(p)","category":"page"},{"location":"manual/PVector/#parse-from-string","page":"PVector","title":"parse from string","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"parse(PVector2D, \"PVector2D{Float64}(1.0, 2.0)\")\nparse(PVector, \"PVector{Float32}(1.0f0, 2.0f0, 3.0f0)\")\nparse(PVector, \"PVector(1.0f0 m s^-1, 2.0f0 m s^-1, 3.0f0 m s^-1)\")\nparse(PVector2D, \"PVector2D{ComplexF64}(1.0im, 2.0im)\")","category":"page"},{"location":"manual/PVector/#numeric-type-conversion","page":"PVector","title":"numeric type conversion","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"convert(PVector{Float32}, PVector(1.1,2.2,3.3))\nconvert(PVector{Int32}, PVector(1.0,2.0,3.0))","category":"page"},{"location":"manual/Clustering/#Clustering","page":"Clustering","title":"Clustering","text":"","category":"section"},{"location":"manual/Random/#Random","page":"Random","title":"Random","text":"","category":"section"},{"location":"manual/Random/","page":"Random","title":"Random","text":"Usage of random point generators is straightforward:","category":"page"},{"location":"manual/Random/","page":"Random","title":"Random","text":"using PhysicalParticles\nrand(PVector{Float64}, 3, 3)\nrand(PVector2D{Int}, 3)\np = randn_pvector(3)\npu = randn_pvector(3, u\"m\")","category":"page"},{"location":"manual/Random/","page":"Random","title":"Random","text":"To generate vectors in normal distribution:","category":"page"},{"location":"manual/Random/","page":"Random","title":"Random","text":"randn_pvector(n::Integer)\nrandn_pvector(n::Integer, T::DataType)\nrandn_pvector(n::Integer, u::Unitful.Units)\nrandn_pvector(n::Integer, u::Unitful.Units, T::DataType)\n\nrandn_pvector2d(n::Integer)\nrandn_pvector2d(n::Integer, T::DataType)\nrandn_pvector2d(n::Integer, u::Unitful.Units)\nrandn_pvector2d(n::Integer, u::Unitful.Units, T::DataType)","category":"page"},{"location":"manual/Neighbors/#Neighbors","page":"Neighbors","title":"Neighbors","text":"","category":"section"},{"location":"manual/guide/#Package-Guide","page":"Package Guide","title":"Package Guide","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"PhysicalParticles.jl is useful for particle based scientific simulations","category":"page"},{"location":"manual/guide/#Installation","page":"Package Guide","title":"Installation","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"pkg> add PhysicalParticles","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"or add from git repository","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"pkg> add https://github.com/JuliaAstroSim/PhysicalParticles.jl","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"Test the package by","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"pkg> test PhysicalParticles","category":"page"},{"location":"manual/guide/#Basic-Usage","page":"Package Guide","title":"Basic Usage","text":"","category":"section"},{"location":"manual/guide/#Vectors","page":"Package Guide","title":"Vectors","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"using PhysicalParticles, UnitfulAstro\na = PVector()\nb = PVector(1.0u\"m\", 2.0u\"m\", 3.0u\"m\")\nc = PVector2D(u\"m/s\")\nuconvert(u\"m\", PVector(1.0, 1.0, 1.0, u\"km\"))\nPVector(BigFloat)\nPVector2D(BigInt, u\"m\")\nPVector(1.0, 1.0) * im\nb * 2.0u\"s\"\nb + PVector(2.0, 2.0, 2.0, u\"m\") / 2\nnorm(PVector2D(3.0f0,4.0f0))\nnormalize(PVector(3.0, 4.0))\nd = PVector(3u\"kpc\", 4u\"kpc\")\nnorm(d)\ndistance(PVector2D(0.0, 0.0), PVector2D(3.0, 4.0))\nrotate(PVector(1.0, 0.0), 0.5pi)\nrotate(PVector(1.0, 0.0, 0.0), 0.0, 0.0, 0.5pi)\nrotate_z(PVector(1.0, 0.0, 0.0), 90.0u\"°\")\nrotate(PVector(1.0, 0.0, 0.0), 0.0, 0.0, 90.0u\"°\", PVector(-1.0, 0.0, 0.0))\nrotate(PVector(0.0, 1.0, 0.0), PVector(0.0, 1.0, 1.0), pi)\ncylinderial(PVector(sqrt(2), sqrt(2), 1.0, u\"m\"))\ncylinderial2xyz(2.0u\"m\", pi/4, 1.0u\"m\")\nspherical(PVector(sqrt(0.5), sqrt(0.5), 1.0, u\"m\"))\nspherical2xyz(sqrt(2)u\"m\", pi/4, pi/4)\nzero(PVector{Float64})\niszero(PVector(u\"m\"))\nisnan(PVector(NaN, NaN))\nPVector2D(1.0, 1.0) ≈ PVector2D(1.0 + 1.0e-8, 1.0 + 1.0e-8)\nustrip(PVector(1.0, 1.0, 1.0, u\"km\"))\nustrip(u\"m\", PVector(1.0, 1.0, 1.0, u\"km\"))","category":"page"},{"location":"manual/guide/#Particles","page":"Package Guide","title":"Particles","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"We provide 2D version for each type below, for example, the 2D version of Ball is Ball2D:","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"Massless()\nMassless(PVector(0.0, 0.0, 0.0), PVector(), 1)\nMassless2D(uCGS)\nBall()\nBall(PVector(0.0u\"m\", 0.0u\"m\", 0.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 0.0u\"kg\", 1)\nStar()\nSPHGas()\na = Star(uAstro)\nb = SPHGas(uAstro)\ndistance(a,b)","category":"page"},{"location":"manual/guide/#Mutate-array-of-immutable-particles","page":"Package Guide","title":"Mutate array of immutable particles","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"To simulate particle dynamics on GPU (bit types), and for better performance, particle data are stored in immutable sturcts. One of the shortcomings is that you have to allocate a new object when changing member data, however, memory operation is optimized when doing this in array:","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"using BangBang\np = Star()\np = setproperties!!(p, Mass = 321.0)\n\na = [Star()]\na[1] = setproperties!!(a[1], Mass = 321.0) # In general, `Mass` is mutated right at its original memory address.","category":"page"},{"location":"manual/guide/#Random-and-Conversion","page":"Package Guide","title":"Random and Conversion","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"p = rand(PVector{Float64}, 3)\npu = rand(PVector{Float64}, 3) * u\"m\"\np_Ball = [Ball(uSI) for i=1:3]\nassign_particles(p_Ball, :Pos, pu)\np_Ball\npconvert([1.0, 2.0, 3.0])\npconvert([1.0u\"m\" 4.0u\"m\";\n          2.0u\"m\" 5.0u\"m\";\n          3.0u\"m\" 6.0u\"m\"])","category":"page"},{"location":"manual/guide/#Extent","page":"Package Guide","title":"Extent","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"p = [Ball(PVector(-1.0u\"m\", 1.0u\"m\", 1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1.0u\"kg\", 1),\n     Ball(PVector(3.0u\"m\", -3.0u\"m\", -3.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 3000.0u\"g\", 2)]\nminimum_x(p)\nmaximum_x(p)\ncenter(p)\npos_center(p)\nmass_center(p)\nmedian(p)\nextent(p)","category":"page"},{"location":"lib/Methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"lib/Methods/#Index","page":"Methods","title":"Index","text":"","category":"section"},{"location":"lib/Methods/","page":"Methods","title":"Methods","text":"Pages = [\"Methods.md\"]","category":"page"},{"location":"lib/Methods/#Public","page":"Methods","title":"Public","text":"","category":"section"},{"location":"lib/Methods/","page":"Methods","title":"Methods","text":"length\nsplit_data\nextent\nvolume\narea\ndistance\naverage\naveragebymass\npos_center\nmass_center\npconvert\nastro\ncgs\nsi\ngetunits\ngetuLength\ngetuTime\ngetuCurrent\ngetuTemperature\ngetuLuminosity\ngetuMass\ngetuAmount\ngetuVel\ngetuAcc\ngetuEnergy\ngetuEntropy\ngetuDensity\ngetuDensity2D\ngetuPressure\naxisunit\nZeroValue\nrandn_pvector\nrandn_pvector2d\nassign_particles\ndatadimension\ncenter\ncenter_x\ncenter_y\ncenter_z\nrotate_x\nrotate_y\nrotate_z\nrotate\ncylinderial\ncylinderial2xyz\nspherical\nspherical2xyz","category":"page"},{"location":"lib/Methods/#PhysicalParticles.split_data","page":"Methods","title":"PhysicalParticles.split_data","text":"split_data(data::AbstractArray, i::Int64, N::Int64)\n\nsplit data to N sections, return the ith section\n\nExamples\n\njulia> split_data([1,2,3], 1, 2)\n2-element Vector{Int64}:\n 1\n 2\n\njulia> split_data([1,2,3], 2, 2)\n1-element Vector{Int64}:\n 3\n\njulia> split_data([1,2,3], 3, 4)\n1-element Vector{Int64}:\n 3\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.extent","page":"Methods","title":"PhysicalParticles.extent","text":"extent(a::Array{T, N})\nextent(data::Dict)\nextent(a::Extent2D, b::Extent2D)\nextent(a::Extent, b::Extent)\n\nGet Extent of an array of mathical vectors or particles, or by comparing two Extents and even array of Extents\n\nExamples\n\njulia> extent([Ball(PVector(-1.0u\"m\", 1.0u\"m\", 1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1.0u\"kg\", 1),\n               Ball(PVector(1.0u\"m\", -1.0u\"m\", -1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1000.0u\"g\", 2)])\nExtent: xMin = -1.0 m, xMax = 1.0 m, yMin = -1.0 m, yMax = 1.0 m, zMin = -1.0 m, zMax = 1.0 m, SideLength = 2.0 m, Center = PVector(0.0 m, 0.0 m, 0.0 m)\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.distance","page":"Methods","title":"PhysicalParticles.distance","text":"function distance(a::AbstractPoint, b::AbstractPoint)\ndistance(a::AbstractParticle, b::AbstractParticle)\n\nEuclidean distance between two points or two particles.\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.average","page":"Methods","title":"PhysicalParticles.average","text":"function average(data, symbol::Symbol)\n\nAverage on field symbol of elements in an array or dict of arrays\n\nExamples\n\na = rand(PVector{Float64}, 5)\naverage(a, :x)\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.averagebymass","page":"Methods","title":"PhysicalParticles.averagebymass","text":"function averagebymass(data, symbol::Symbol)\nfunction averagebymass(data::StructArray, symbol::Symbol)\n\nAverage on field symbol weighted by :Mass of elements in an array of dict of arrays\n\nExamples\n\naveragebymass(data, :Pos)\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.pos_center","page":"Methods","title":"PhysicalParticles.pos_center","text":"pos_center(a::Array{T}) where T <: AbstractParticle\npos_center(a::StructArray)\n\nCompute averaged position with equal weights.  It is different from middle(a, :Pos) which computes the middle value of a symbol (useful to avoid influences from distant particles).\n\nThere are differences among center, pos_center, mass_center and median:\n\ncenter: box center of particles\npos_center: average position of particles\nmass_center: mass weighted average position of particles\nmedian: middle value of positions of particles\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.mass_center","page":"Methods","title":"PhysicalParticles.mass_center","text":"mass_center(a::Array{T}) where T <: AbstractParticle\nmass_center(a::StructArray)\n\nCompute mass center of particles, which is weighted by mass.\n\nThere are differences among center, pos_center, mass_center and median:\n\ncenter: box center of particles\npos_center: average position of particles\nmass_center: mass weighted average position of particles\nmedian: middle value of positions of particles\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.pconvert","page":"Methods","title":"PhysicalParticles.pconvert","text":"pconvert(a::Abstractay{T,1}) where T<:Number\n\nconvert two-element array to PVector2D, and three-element array to PVector\n\nExamples\n\njulia> pconvert([1.0, 2.0])\nPVector2D{Float64}(1.0, 2.0)\n\njulia> pconvert([1.0, 2.0, 3.0])\nPVector{Float64}(1.0, 2.0, 3.0)\n\n\n\n\n\npconvert(a::Abstractay{T,2}) where T<:Number\n\nconvert 2xN Array to Array{PVector2D,1}, 3xN Array to Array{PVector,1}\n\nExamples\n\njulia> pconvert([1.0 3.0; \n                 2.0 4.0])\n2-element Vector{PVector2D}:\n PVector2D{Float64}(1.0, 2.0)\n PVector2D{Float64}(3.0, 4.0)\n\njulia> pconvert([1.0 4.0;\n                 2.0 5.0;\n                 3.0 6.0])\n2-element Vector{PVector}:\n PVector{Float64}(1.0, 2.0, 3.0)\n PVector{Float64}(4.0, 5.0, 6.0)\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.astro","page":"Methods","title":"PhysicalParticles.astro","text":"Set default units to uAstro. See Unitful.preferunits for more info\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.cgs","page":"Methods","title":"PhysicalParticles.cgs","text":"Set default units to uCGS. See Unitful.preferunits for more info\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.si","page":"Methods","title":"PhysicalParticles.si","text":"Set default units to uSI. See Unitful.preferunits for more info\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getunits","page":"Methods","title":"PhysicalParticles.getunits","text":"getunits(units = uDefaults)\n\nReturn Tuple of units from units\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuLength","page":"Methods","title":"PhysicalParticles.getuLength","text":"function getuLength(::Nothing)\nfunction getuLength(units)\n\nExtract length unit from units or nothing\n\nExamples\n\njulia> getuLength(nothing)\n\njulia> getuLength(uAstro)\nkpc\n\njulia> getuLength(uSI)\nm\n\njulia> getuLength(uCGS)\ncm\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuTime","page":"Methods","title":"PhysicalParticles.getuTime","text":"function getuTime(::Nothing)\nfunction getuTime(units)\n\nExtract time unit from units or nothing\n\nExamples\n\njulia> getuTime(nothing)\n\njulia> getuTime(uAstro)\nGyr\n\njulia> getuTime(uSI)\ns\n\njulia> getuTime(uCGS)\ns\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuCurrent","page":"Methods","title":"PhysicalParticles.getuCurrent","text":"function getuCurrent(::Nothing)\nfunction getuCurrent(units)\n\nExtract electric current unit from units or nothing\n\nExamples\n\njulia> getuCurrent(nothing)\n\njulia> getuCurrent(uAstro)\nA\n\njulia> getuCurrent(uSI)\nA\n\njulia> getuCurrent(uCGS)\nA\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuTemperature","page":"Methods","title":"PhysicalParticles.getuTemperature","text":"function getuTemperature(::Nothing)\nfunction getuTemperature(units)\n\nExtract temperature unit from units or nothing\n\nExamples\n\njulia> getuTemperature(nothing)\n\njulia> getuTemperature(uAstro)\nK\n\njulia> getuTemperature(uSI)\nK\n\njulia> getuTemperature(uCGS)\nK\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuLuminosity","page":"Methods","title":"PhysicalParticles.getuLuminosity","text":"function getuLuminosity(::Nothing)\nfunction getuLuminosity(units)\n\nExtract luminosity unit from units or nothing\n\nExamples\n\njulia> getuLuminosity(nothing)\n\njulia> getuLuminosity(uAstro)\ncd\n\njulia> getuLuminosity(uSI)\ncd\n\njulia> getuLuminosity(uCGS)\ncd\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuMass","page":"Methods","title":"PhysicalParticles.getuMass","text":"function getuMass(::Nothing)\nfunction getuMass(units)\n\nExtract mass unit from units or nothing\n\nExamples\n\njulia> getuMass(nothing)\n\njulia> getuMass(uAstro)\nM⊙\n\njulia> getuMass(uSI)\nkg\n\njulia> getuMass(uCGS)\ng\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuAmount","page":"Methods","title":"PhysicalParticles.getuAmount","text":"function getuAmount(::Nothing)\nfunction getuAmount(units)\n\nExtract amount unit from units or nothing\n\nExamples\n\njulia> getuAmount(nothing)\n\njulia> getuAmount(uAstro)\nmol\n\njulia> getuAmount(uSI)\nmol\n\njulia> getuAmount(uCGS)\nmol\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuVel","page":"Methods","title":"PhysicalParticles.getuVel","text":"function getuVel(::Nothing)\nfunction getuVel(units)\n\nExtract velocity unit from units or nothing\n\nExamples\n\njulia> getuVel(nothing)\n\njulia> getuVel(uAstro)\nkpc Gyr^-1\n\njulia> getuVel(uSI)\nm s^-1\n\njulia> getuVel(uCGS)\ncm s^-1\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuAcc","page":"Methods","title":"PhysicalParticles.getuAcc","text":"function getuAcc(::Nothing)\nfunction getuAcc(units)\n\nExtract acceleration unit from units or nothing\n\nExamples\n\njulia> getuAcc(nothing)\n\njulia> getuAcc(uAstro)\nkpc Gyr^-2\n\njulia> getuAcc(uSI)\nm s^-2\n\njulia> getuAcc(uCGS)\ncm s^-2\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuEnergy","page":"Methods","title":"PhysicalParticles.getuEnergy","text":"function getuEnergy(::Nothing)\nfunction getuEnergy(units)\n\nExtract energy unit from units or nothing\n\nExamples\n\njulia> getuEnergy(nothing)\n\njulia> getuEnergy(uAstro)\nkpc^2 M⊙ Gyr^-2\n\njulia> getuEnergy(uSI)\nkg m^2 s^-2\n\njulia> getuEnergy(uCGS)\ng cm^2 s^-2\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuEntropy","page":"Methods","title":"PhysicalParticles.getuEntropy","text":"function getuEntropy(::Nothing)\nfunction getuEntropy(units)\n\nExtract entropy unit from units or nothing\n\nExamples\n\njulia> getuEntropy(nothing)\n\njulia> getuEntropy(uAstro)\nkpc^2 M⊙ K^-1 Gyr^-2\n\njulia> getuEntropy(uSI)\nkg m^2 K^-1 s^-2\n\njulia> getuEntropy(uCGS)\ng cm^2 K^-1 s^-2\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuDensity","page":"Methods","title":"PhysicalParticles.getuDensity","text":"function getuDensity(::Nothing)\nfunction getuDensity(units)\n\nExtract 3D density unit from units or nothing\n\nExamples\n\njulia> getuDensity(nothing)\n\njulia> getuDensity(uAstro)\nM⊙ kpc^-3\n\njulia> getuDensity(uSI)\nkg m^-3\n\njulia> getuDensity(uCGS)\ng cm^-3\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuDensity2D","page":"Methods","title":"PhysicalParticles.getuDensity2D","text":"function getuDensity2D(::Nothing)\nfunction getuDensity2D(units)\n\nExtract 2D density unit from units or nothing\n\nExamples\n\njulia> getuDensity2D(nothing)\n\njulia> getuDensity2D(uAstro)\nM⊙ kpc^-2\n\njulia> getuDensity2D(uSI)\nkg m^-2\n\njulia> getuDensity2D(uCGS)\ng cm^-2\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.getuPressure","page":"Methods","title":"PhysicalParticles.getuPressure","text":"function getuPressure(::Nothing)\nfunction getuPressure(units)\n\nExtract 2D density unit from units or nothing\n\nExamples\n\njulia> getuPressure(nothing)\n\njulia> getuPressure(uAstro)\nM⊙ kpc^-1 Gyr^-2\n\njulia> getuPressure(uSI)\nkg m^-1 s^-2\n\njulia> getuPressure(uCGS)\ng cm^-1 s^-2\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.axisunit","page":"Methods","title":"PhysicalParticles.axisunit","text":"axisunit(::Nothing)\naxisunit(u::Units)\naxisunit(s::AbstractString, u::Units)\n\nReturn a String for pretty printing.\n\nExamples\n\njulia> axisunit(nothing)\n\"\"\n\njulia> axisunit(u\"m\")\n\" [m]\"\n\njulia> axisunit(\"Time\", u\"Gyr\")\n\"Time [Gyr]\"\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.ZeroValue","page":"Methods","title":"PhysicalParticles.ZeroValue","text":"ZeroValue(::Type{T}, ::Nothing) where T<:Number\nZeroValue(::Type{T}, units::Vector{Unitful.FreeUnits{N, D, nothing} where D where N} = uAstro) where T<:Number\n\nConstruct an immutable struct providing zero values of type T in corresponding units (default is uAstro). Use nothing if unitless. Useful for accumulated summation, array initialization, etc.\n\nExamples\n\nZeroValue(Float32, nothing)\nZeroValue(Int32)\nZeroValue(BigFloat, uSI)\nZeroValue(Measurement, uCGS)\n\n\n\n\n\nfunction ZeroValue(::Nothing)\nfunction ZeroValue(units::Vector{Unitful.FreeUnits{N, D, nothing} where D where N} = uAstro)\n\nConstruct an immutable struct providing zero Measurement values in corresponding units (default is uAstro). Use nothing if unitless. Useful for accumulated summation, array initialization, etc.\n\nExamples\n\nZeroValue(nothing)\nZeroValue()\nZeroValue(uSI)\nZeroValue(uCGS)\n\n\n\n\n\n","category":"type"},{"location":"lib/Methods/#PhysicalParticles.randn_pvector","page":"Methods","title":"PhysicalParticles.randn_pvector","text":"randn_pvector2d(n::Integer, T::DataType = Float64)\nrandn_pvector2d(n::Integer, u::Units, T::DataType = Float64)\nrandn_pvector(n::Integer, T::DataType = Float64)\nrandn_pvector(n::Integer, u::Units, T::DataType = Float64)\n\nGenerate uniformly distributed PVectors\n\nExamples\n\njulia> p = randn_pvector(5)\njulia> pu = randn_pvector2d(5, u\"m\")\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.randn_pvector2d","page":"Methods","title":"PhysicalParticles.randn_pvector2d","text":"randn_pvector2d(n::Integer, T::DataType = Float64)\nrandn_pvector2d(n::Integer, u::Units, T::DataType = Float64)\nrandn_pvector(n::Integer, T::DataType = Float64)\nrandn_pvector(n::Integer, u::Units, T::DataType = Float64)\n\nGenerate uniformly distributed PVectors\n\nExamples\n\njulia> p = randn_pvector(5)\njulia> pu = randn_pvector2d(5, u\"m\")\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.assign_particles","page":"Methods","title":"PhysicalParticles.assign_particles","text":"assign_particles(particles::Array{P,N} where P<:AbstractParticle, symbol::Symbol, data::Array) where N\n\nAssign the symbol of particles with elements in data one by one. particles and data must have equal length.\n\nExamples\n\njulia> assign_particles([Ball(uSI) for i=1:3], :Pos, rand(PVector{Float64}, 3) * u\"m\")\n\n\n\n\n\nassign_particles(particles::Array{P,N} where P<:AbstractParticle, symbol::Symbol, data) where N\nassign_particles(particles::StructArray, symbol::Symbol, data)\n\nAssign the symbol of particles to data identically.\n\nExamples\n\njulia> assign_particles([Ball(uSI) for i=1:3], :Mass, 1.0u\"kg\")\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.datadimension","page":"Methods","title":"PhysicalParticles.datadimension","text":"function datadimension\n\nTraits function to specify whether the data is unitful/unitless and 2D/3D.\n\nExamples\n\njulia> datadimension(PVector2D())\nUnitless2D()\n\njulia> datadimension(PVector())\nUnitless3D()\n\njulia> datadimension(Star2D(uAstro))\nPhysical2D()\n\njulia> datadimension(Star(uAstro))\nPhysical3D()\n\njulia> datadimension([PVector2D()])\nUnitless2D()\n\njulia> datadimension([PVector()])\nUnitless3D()\n\njulia> datadimension([Star2D(uAstro)])\nPhysical2D()\n\njulia> datadimension([Star(uAstro)])\nPhysical3D()\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.center","page":"Methods","title":"PhysicalParticles.center","text":"center(a::Array{T<:Union{AbstractParticle2D, AbstractPoint2D}, N}) -> Any\n\n\nCompute box center of points or particles\n\nThere are differences among center, pos_center, mass_center and median:\n\ncenter: box center of particles\npos_center: average position of particles\nmass_center: mass weighted average position of particles\nmedian: middle value of positions of particles\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.center_x","page":"Methods","title":"PhysicalParticles.center_x","text":"Compute box center of x direction of points or particles\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.center_y","page":"Methods","title":"PhysicalParticles.center_y","text":"Compute box center of y direction of points or particles\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.center_z","page":"Methods","title":"PhysicalParticles.center_z","text":"Compute box center of z direction of points or particles\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.rotate_x","page":"Methods","title":"PhysicalParticles.rotate_x","text":"rotate_x(p::PVector, roll::Number)\n\nRotate p around x-axis by roll in radian angle. The rotation direction is right-handed, which is counter-clockwise in y-z plane. Angles can have units, for example, u\"°\" (\\degree).\n\nThe rotation matrix:\n\n           | 1      0          0      |\nRx(roll) = | 0  cos(roll)  -sin(roll) |\n           | 0  sin(roll)   cos(roll) |\n\n\n\n\n\nrotate_x(data, roll::Number; vel::Bool = true)\n\nRotate all particles in data around x-axis by roll in radian angle.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\nrotate_x(p::PVector, roll::Number, center::PVector)\n\nRotate p around the x-axis of center point by roll in radian angle.\n\n\n\n\n\nrotate_x(data, roll::Number, center::PVector; vel::Bool = true)\n\nRotate all particles in data around the x-axis of center point by roll in radian angle.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.rotate_y","page":"Methods","title":"PhysicalParticles.rotate_y","text":"rotate_y(p::PVector, pitch::Number)\n\nRotate p around y-axis by pitch in radian angle. The rotation direction is right-handed, which is counter-clockwise in y-z plane. Angles can have units, for example, u\"°\" (\\degree).\n\nThe rotation matrix:\n\n            |  cos(pitch)   0   sin(pitch) |\nRy(pitch) = |       0       1        0     |\n            | -sin(pitch)   0   cos(pitch) |\n\n\n\n\n\nrotate_y(data, pitch::Number; vel::Bool = true)\n\nRotate all particles in data around y-axis by pitch in radian angle.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\nrotate_y(p::PVector, pitch::Number, center::PVector)\n\nRotate p around the y-axis of center point by pitch in radian angle.\n\n\n\n\n\nrotate_y(data, pitch::Number, center::PVector; vel::Bool = true)\n\nRotate all particles in data around the y-axis of center point by pitch in radian angle.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.rotate_z","page":"Methods","title":"PhysicalParticles.rotate_z","text":"rotate_z(p::PVector, yaw::Number)\n\nRotate p around z-axis by yaw in radian angle. The rotation direction is right-handed, which is counter-clockwise in y-z plane. Angles can have units, for example, u\"°\" (\\degree).\n\nThe rotation matrix:\n\n          | cos(yaw)  -sin(yaw)  0 |\nRz(yaw) = | sin(yaw)   cos(yaw)  0 |\n          |    0          0      1 |\n\n\n\n\n\nrotate_z(data, yaw::Number; vel::Bool = true)\n\nRotate all particles in data around z-axis by yaw in radian angle.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\nrotate_z(p::PVector, yaw::Number, center::PVector)\n\nRotate p around the z-axis of center point by yaw in radian angle.\n\n\n\n\n\nrotate_z(data, yaw::Number, center::PVector; vel::Bool = true)\n\nRotate all particles in data around the z-axis of center point by yaw in radian angle.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.rotate","page":"Methods","title":"PhysicalParticles.rotate","text":"rotate(p::PVector, α::Number, β::Number, γ::Number)\n\nRotate p by radian Euler angles (α, β, γ) = (roll, pitch, yaw). Angles can have units, for example, u\"°\" (\\degree).\n\n\n\n\n\nrotate(data, yaw::Number, center::PVector; vel::Bool = true)\n\nRotate all particles in data by radian Euler angles (α, β, γ) = (roll, pitch, yaw).\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\nrotate(p::PVector, α::Number, β::Number, γ::Number, center::PVector)\n\nRotate p by radian Euler angles (α, β, γ) = (roll, pitch, yaw) around center point. Angles can have units, for example, u\"°\" (\\degree).\n\n\n\n\n\nrotate(data, yaw::Number, center::PVector; vel::Bool = true)\n\nRotate all particles in data by radian Euler angles (α, β, γ) = (roll, pitch, yaw) around center point.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\nrotate(p::PVector, vec::PVector, θ::Number)\n\nRotate p around direction vector vec by angle θ.\n\nFor normalized vec = (x, y, z), the rotation matrix:\n\n            |  cos(θ) + (1-cos(θ))*x^2   (1-cos(θ))*x*y - sin(θ)*z  (1-cos(θ))*x*z + sin(θ)*y |\nM(vec, θ) = | (1-cos(θ))*y*x + sin(θ)*z   cos(θ) + (1-cos(θ))*y^2   (1-cos(θ))*y*z - sin(θ)*x |\n            | (1-cos(θ))*z*x - sin(θ)*y  (1-cos(θ))*z*y + sin(θ)*x   cos(θ) + (1-cos(θ))*z^2  |\n\n\n\n\n\nrotate(data::Array, vec::PVector, θ::Number; vel::Bool = true)\n\nRotate all particles in data around direction vector vec by angle θ.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\nrotate(p::PVector, vec::PVector, θ::Number, center::PVector)\n\nRotate p around direction vector vec at center point by angle θ.\n\n\n\n\n\nrotate(data, vec::PVector, θ::Number, center::PVector; vel::Bool = true)\n\nRotate all particles in data around direction vector vec at center point by angle θ.\n\nvel::Bool = false: Rotate velocity around origin at the same time.\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.cylinderial","page":"Methods","title":"PhysicalParticles.cylinderial","text":"cylinderial(p::PVector2D)\n\nConvert PVector2D to Cylinderial Coordinates. Returns Tuple(r, θ)\n\n\n\n\n\ncylinderial(p::PVector)\n\nConvert PVector to Cylinderial Coordinates. Returns Tuple(r, θ, z)\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.cylinderial2xyz","page":"Methods","title":"PhysicalParticles.cylinderial2xyz","text":"cylinderial2xyz(r::Number, θ::Number)\n\nConvert Cylinderial Coordinates to PVector2D\n\n\n\n\n\ncylinderial2xyz(r::Number, θ::Number, z::Number)\n\nConvert Cylinderial Coordinates to PVector\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.spherical","page":"Methods","title":"PhysicalParticles.spherical","text":"spherical(p::PVector)\n\nConvert PVector to Spherical Coordinates. Returns Tuple(r, θ, ϕ)\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.spherical2xyz","page":"Methods","title":"PhysicalParticles.spherical2xyz","text":"spherical2xyz(r::Number, θ::Number, ϕ::Number)\n\nConvert Spherical Coordinates to PVector\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#Internal","page":"Methods","title":"Internal","text":"","category":"section"},{"location":"lib/Methods/","page":"Methods","title":"Methods","text":"PhysicalParticles.min_x\nPhysicalParticles.max_x\nPhysicalParticles.min_y\nPhysicalParticles.max_y\nPhysicalParticles.min_z\nPhysicalParticles.max_z\nPhysicalParticles.minimum_x\nPhysicalParticles.maximum_x\nPhysicalParticles.minimum_y\nPhysicalParticles.maximum_y\nPhysicalParticles.minimum_z\nPhysicalParticles.maximum_z","category":"page"},{"location":"lib/Methods/#PhysicalParticles.min_x","page":"Methods","title":"PhysicalParticles.min_x","text":"min_x(a::AbstractPoint, b::AbstractPoint)\nmin_x(a::AbstractParticle, b::AbstractParticle)\n\nReturn the smaller :x field of a and b\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.max_x","page":"Methods","title":"PhysicalParticles.max_x","text":"max_x(a::AbstractPoint, b::AbstractPoint)\nmax_x(a::AbstractParticle, b::AbstractParticle)\n\nReturn the larger :x field of a and b\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.min_y","page":"Methods","title":"PhysicalParticles.min_y","text":"min_y(a::AbstractPoint, b::AbstractPoint)\nmin_y(a::AbstractParticle, b::AbstractParticle)\n\nReturn the smaller :y field of a and b\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.max_y","page":"Methods","title":"PhysicalParticles.max_y","text":"max_y(a::AbstractPoint, b::AbstractPoint)\nmax_y(a::AbstractParticle, b::AbstractParticle)\n\nReturn the larger :y field of a and b\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.min_z","page":"Methods","title":"PhysicalParticles.min_z","text":"min_z(a::AbstractPoint, b::AbstractPoint)\nmin_z(a::AbstractParticle, b::AbstractParticle)\n\nReturn the smaller :z field of a and b\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.max_z","page":"Methods","title":"PhysicalParticles.max_z","text":"max_z(a::AbstractPoint, b::AbstractPoint)\nmax_z(a::AbstractParticle, b::AbstractParticle)\n\nReturn the larger :z field of a and b\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.minimum_x","page":"Methods","title":"PhysicalParticles.minimum_x","text":"function minimum_x(a::Array{T,N}) where T <: AbstractPoint where N\nfunction minimum_x(a::Array{T,N}) where T <: AbstractParticle where N\nfunction minimum_x(a::StructArray)\n\nReturn the minimum :x field of points in array a Return the minimum Pos.x of particles in array a\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.maximum_x","page":"Methods","title":"PhysicalParticles.maximum_x","text":"function maximum_x(a::Array{T,N}) where T <: AbstractPoint where N\nfunction maximum_x(a::Array{T,N}) where T <: AbstractParticle where N\nfunction maximum_x(a::StructArray)\n\nReturn the maximum :x field of points in array a Return the maximum Pos.x of particles in array a\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.minimum_y","page":"Methods","title":"PhysicalParticles.minimum_y","text":"function minimum_y(a::Array{T,N}) where T <: AbstractPoint where N\nfunction minimum_y(a::Array{T,N}) where T <: AbstractParticle where N\nfunction minimum_y(a::StructArray)\n\nReturn the minimum :y field of points in array a Return the minimum Pos.y of particles in array a\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.maximum_y","page":"Methods","title":"PhysicalParticles.maximum_y","text":"function maximum_y(a::Array{T,N}) where T <: AbstractPoint where N\nfunction maximum_y(a::Array{T,N}) where T <: AbstractParticle where N\nfunction maximum_y(a::StructArray)\n\nReturn the maximum :y field of points in array a Return the maximum Pos.y of particles in array a\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.minimum_z","page":"Methods","title":"PhysicalParticles.minimum_z","text":"function minimum_z(a::Array{T,N}) where T <: AbstractPoint where N\nfunction minimum_z(a::Array{T,N}) where T <: AbstractParticle where N\nfunction minimum_z(a::StructArray)\n\nReturn the minimum :z field of points in array a Return the minimum Pos.z of particles in array a\n\n\n\n\n\n","category":"function"},{"location":"lib/Methods/#PhysicalParticles.maximum_z","page":"Methods","title":"PhysicalParticles.maximum_z","text":"function maximum_z(a::Array{T,N}) where T <: AbstractPoint where N\nfunction maximum_z(a::Array{T,N}) where T <: AbstractParticle where N\nfunction maximum_z(a::StructArray)\n\nReturn the maximum :z field of points in array a Return the maximum Pos.z of particles in array a\n\n\n\n\n\n","category":"function"},{"location":"#PhysicalParticles.jl","page":"Home","title":"PhysicalParticles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Support for physical vectors and particles (Astrophysics for now)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Source code: https://github.com/JuliaAstroSim/PhysicalParticles.jl","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Type and toolkit for 2D & 3D vectors, physical vectors and physical particles\nSupport basic mathematical calculations\nSupport clustering analysis and nearest neighbour searching","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
