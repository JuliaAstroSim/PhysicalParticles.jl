var documenterSearchIndex = {"docs":
[{"location":"manual/PVector/#PVector-1","page":"PVector","title":"PVector","text":"","category":"section"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"All of the sub-types of Number and Quantity are supported. In general it works as we expected whereas there are too many possibilities to foresee. Mathematically vector operations, linear algebra, array conversions, neighbor searching, etc. are well documented in coreesponding sections.","category":"page"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"The vector types are unmutable out of performance reason, and the coordinate members must be identical types:","category":"page"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"julia> PVector2D(1.0, 1.0f0)\nERROR: MethodError: no method matching PVector2D(::Float64, ::Float32)\nClosest candidates are:\n  PVector2D(::Number, ::Number, ::Unitful.Units) at C:\\Users\\islent\\.julia\\packages\\PhysicalParticles\\oFZmG\\src\\PVector.jl:45\n  PVector2D(::T, ::T) where T<:Number at C:\\Users\\islent\\.julia\\packages\\PhysicalParticles\\oFZmG\\src\\PVector.jl:2\nStacktrace:\n [1] top-level scope at REPL[27]:1\n\njulia> PVector2D(1.0u\"m\", 1.0u\"km\")\nERROR: MethodError: no method matching PVector2D(::Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}, ::Quantity{Float64,ùêã,Unitful.FreeUnits{(km,),ùêã,nothing}})\nClosest candidates are:\n  PVector2D(::Number, ::Number, ::Unitful.Units) at C:\\Users\\islent\\.julia\\packages\\PhysicalParticles\\oFZmG\\src\\PVector.jl:45\n  PVector2D(::T, ::T) where T<:Number at C:\\Users\\islent\\.julia\\packages\\PhysicalParticles\\oFZmG\\src\\PVector.jl:2\nStacktrace:\n [1] top-level scope at REPL[28]:1","category":"page"},{"location":"manual/PVector/#Type-Hierarchy-1","page":"PVector","title":"Type Hierarchy","text":"","category":"section"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"abstract type AbstractPoint{T} end\nabstract type AbstractPoint2D{T} <: AbstractPoint{T} end\nabstract type AbstractPoint3D{T} <: AbstractPoint{T} end\n\nstruct PVector2D{T<:Union{Number, Quantity}} <: AbstractPoint2D{T}\n    x::T\n    y::T\nend\n\nstruct PVector{T<:Union{Number, Quantity}} <: AbstractPoint3D{T}\n    x::T\n    y::T\n    z::T\nend","category":"page"},{"location":"manual/PVector/#PVector-and-PVector2D-1","page":"PVector","title":"PVector and PVector2D","text":"","category":"section"},{"location":"manual/PVector/#Constructor-1","page":"PVector","title":"Constructor","text":"","category":"section"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"It is assumed that 3D vectors are used more often, so we choose PVector to represent 3D vectors and provide user-friendly functions to avoid errors in case you missed suffix 2D:","category":"page"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"julia> PVector(1.0, 2.0)\nPVector2D{Float64}(1.0, 2.0)\n\njulia> PVector(2.0, 3.0, u\"m\")\nPVector2D{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(2.0 m, 3.0 m)","category":"page"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"The default constructors of PVector are still 3d-version:","category":"page"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"julia> PVector()\nPVector{Float64}(0.0, 0.0, 0.0)\n\njulia> PVector(u\"m\")\nPVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m)","category":"page"},{"location":"manual/PVector/#Basic-Operators-1","page":"PVector","title":"Basic Operators","text":"","category":"section"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"Basic maths are well support by overriding Base: +, -, *, /, and array operations are supported by overriding Base: length, iterate, to_index","category":"page"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"julia> a = npconvert(ones(3))\nPVector{Float64}(1.0, 1.0, 1.0)\n\njulia> b = npconvert(ones(3)) * 2\nPVector{Float64}(2.0, 2.0, 2.0)\n\njulia> a + b\nPVector{Float64}(3.0, 3.0, 3.0)\n\njulia> a * b\n6.0\n\njulia> norm(a)\n1.7320508075688772\n\njulia> norm(a) == sqrt(3)\ntrue\n\njulia> normalize(a)\nPVector{Float64}(0.5773502691896258, 0.5773502691896258, 0.5773502691896258)\n\njulia> normalize(a) == a / sqrt(3)\ntrue\n\njulia> cross(a, b)\nPVector{Float64}(0.0, 0.0, 0.0)\n\njulia> dot(a,b) == *(a,b)\ntrue\n\njulia> c = pconvert(ones(3)) * 1.0u\"m\"\nPVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(1.0 m, 1.0 m, 1.0 m)\n\njulia> c * a\n3.0 m","category":"page"},{"location":"manual/PVector/#More-types,-more-possibilities-1","page":"PVector","title":"More types, more possibilities","text":"","category":"section"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"T<:Union{Number, Quantity} gives us a whole world to try out new vector operations. As we mentioned above, the build-in type operation and promotion schemes have guaranteed most of operations would be correct:","category":"page"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"julia> a = PVector(1.0, 1.0, 1.0) * im\nPVector{Complex{Float64}}(0.0 + 1.0im, 0.0 + 1.0im, 0.0 + 1.0im)\n\njulia> a * PVector(1, 2, 3)\n0.0 + 6.0im\n\njulia> norm(a)\n0.0 + 1.7320508075688772im\n\n\njulia> b = PVector(1.0f0, 2.0f0)\nPVector2D{Float32}(1.0f0, 2.0f0)\n\njulia> b * 2\nPVector2D{Float32}(2.0f0, 4.0f0)\n\njulia> b * 2.0\nPVector2D{Float64}(2.0, 4.0)","category":"page"},{"location":"manual/PVector/#","page":"PVector","title":"PVector","text":"We did not cover all combinations in auto-test, but fortunately everything worked well in daily usage! When it comes to Quantity, the computed Units may causes some issues, so we handled them in particular as documented in LinearAlgebra section.","category":"page"},{"location":"manual/Clustering/#Clustering-1","page":"Clustering","title":"Clustering","text":"","category":"section"},{"location":"manual/Extent/#Extent-1","page":"Extent","title":"Extent","text":"","category":"section"},{"location":"manual/Extent/#Center-1","page":"Extent","title":"Center","text":"","category":"section"},{"location":"manual/Extent/#Finding-Extent-1","page":"Extent","title":"Finding Extent","text":"","category":"section"},{"location":"manual/Random/#Random-1","page":"Random","title":"Random","text":"","category":"section"},{"location":"manual/Neighbors/#Neighbors-1","page":"Neighbors","title":"Neighbors","text":"","category":"section"},{"location":"lib/Methods/#Methods-1","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"lib/Types/#Types-1","page":"Types","title":"Types","text":"","category":"section"},{"location":"manual/Conversion/#Conversion-1","page":"Conversion","title":"Conversion","text":"","category":"section"},{"location":"manual/guide/#Package-Guide-1","page":"Package Guide","title":"Package Guide","text":"","category":"section"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"PhysicalParticles.jl is useful for particle based scientific simulations","category":"page"},{"location":"manual/guide/#Installation-1","page":"Package Guide","title":"Installation","text":"","category":"section"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"pkg> add PhysicalParticles","category":"page"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"or add from git repository","category":"page"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"pkg> add https://github.com/JuliaAstroSim/PhysicalParticles.jl","category":"page"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"Test the package by","category":"page"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"pkg> test PhysicalParticles","category":"page"},{"location":"manual/guide/#Basic-Usage-1","page":"Package Guide","title":"Basic Usage","text":"","category":"section"},{"location":"manual/guide/#Vectors-1","page":"Package Guide","title":"Vectors","text":"","category":"section"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"julia> using PhysicalParticles, Unitful, UnitfulAstro\n\njulia> a = PVector()\nPVector{Float64}(0.0, 0.0, 0.0)\n\njulia> b = PVector(1.0u\"m\", 2.0u\"m\", 3.0u\"m\")\nPVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(1.0 m, 2.0 m, 3.0 m)\n\njulia> c = PVector2D(u\"m/s\")\nPVector2D{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(m, s^-1),ùêã*ùêì^-1,nothing}}}(0.0 m s^-1, 0.0 m s^-1)\n\n\n\njulia> PVector(1.0, 1.0) * im\nPVector2D{Complex{Float64}}(0.0 + 1.0im, 0.0 + 1.0im)\n\njulia> b * 2.0u\"s\"\nPVector{Quantity{Float64,ùêã*ùêì,Unitful.FreeUnits{(m, s),ùêã*ùêì,nothing}}}(2.0 m s, 4.0 m s, 6.0 m s)\n\njulia> b + PVector(2.0, 2.0, 2.0, u\"m\") / 2\nPVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(2.0 m, 3.0 m, 4.0 m)\n\njulia> norm(PVector2D(3.0f0,4.0f0))\n5.0f0\n\njulia> normalize(PVector(3.0, 4.0))\nPVector2D{Float64}(0.6, 0.8)\n\njulia> d = PVector(3u\"kpc\", 4u\"kpc\")\nPVector2D{Quantity{Int64,ùêã,Unitful.FreeUnits{(kpc,),ùêã,nothing}}}(3 kpc, 4 kpc)\n\njulia> norm(d)\n1.5428387907456837e20 m\n\n\n\njulia> distance(PVector2D(0.0, 0.0), PVector2D(3.0, 4.0))\n5.0\n\njulia> rotate(PVector(1.0, 0.0), 0.5pi)\nPVector2D{Float64}(6.123233995736766e-17, 1.0)","category":"page"},{"location":"manual/guide/#Particles-1","page":"Package Guide","title":"Particles","text":"","category":"section"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"We provide 2D version for each type below, for example, the 2D version of Ball is Ball2D:","category":"page"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"julia> Massless(PVector(0.0, 0.0, 0.0), PVector(), 1)\nMassless{Float64,Int64}(PVector{Float64}(0.0, 0.0, 0.0), PVector{Float64}(0.0, 0.0, 0.0), 1)\n\njulia> Ball(PVector(0.0u\"m\", 0.0u\"m\", 0.0u\"m\"), PVector(u\"m\"), 0.0u\"kg\", 1)\nBall{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m), PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m), 0.0 kg, 1)\n\njulia> a = Star()\nStar{Float64,Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(kpc,),ùêã,nothing}}}(0.0 kpc, 0.0 kpc, 0.0 kpc), PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(Gyr^-1, kpc),ùêã*ùêì^-1,nothing}}}(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), PVector{Quantity{Float64,ùêã*ùêì^-2,Unitful.FreeUnits{(Gyr^-2, kpc),ùêã*ùêì^-2,nothing}}}(0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2), 0.0 M‚äô, 0, 0, 0, 0.0, 0.0 J, 0.0 kpc Gyr^-2)\n\njulia> b = SPHGas()\nSPHGas{Float64,Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(kpc,),ùêã,nothing}}}(0.0 kpc, 0.0 kpc, 0.0 kpc), PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(Gyr^-1, kpc),ùêã*ùêì^-1,nothing}}}(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), PVector{Quantity{Float64,ùêã*ùêì^-2,Unitful.FreeUnits{(Gyr^-2, kpc),ùêã*ùêì^-2,nothing}}}(0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2), 0.0 M‚äô, 0, 0, 0, 0.0, 0.0 J, 0.0 kpc Gyr^-2, 0.0 J K^-1, 0.0 M‚äô kpc^-3, 0.0 kpc, 0.0, 0.0, 0, PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(Gyr^-1, kpc),ùêã*ùêì^-1,nothing}}}(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), 0.0 Gyr^-1, 0.0 Gyr^-1, 0.0, 0.0 N m^-1, 0.0 J K^-1 s^-1, 0.0 kpc Gyr^-1)\n\njulia> distance(a,b)\n0.0 m","category":"page"},{"location":"manual/guide/#Random-and-Conversion-1","page":"Package Guide","title":"Random and Conversion","text":"","category":"section"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"julia> p = rand_pvector(3)\n3-element Array{PVector{Float64},1}:\n PVector{Float64}(0.899541890819791, 0.49609709458549345, 0.22817220536717397)\n PVector{Float64}(0.21907343513386301, 0.39110699072427035, 0.3502946880565312)\n PVector{Float64}(0.8107782153679699, 0.20218167820102884, 0.94236923352867)\n\njulia> pu = rand_pvector(3, u\"m\")\n3-element Array{PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}},1}:\n PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.6477898102542425 m, 0.4373299903072585 m, 0.7049677138795583 m)\n PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.8651944634833202 m, 0.5480460857713867 m, 0.5620548650425954 m)\n PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.28164175368241895 m, 0.1673360850328498 m, 0.31321825771349987 m)\n\njulia> p_Ball = [Ball() for i=1:3]\n3-element Array{Ball{Int64},1}:\n Ball{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m), PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(m, s^-1),ùêã*ùêì^-1,nothing}}}(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), 0.0 kg, 0)\n Ball{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m), PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(m, s^-1),ùêã*ùêì^-1,nothing}}}(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), 0.0 kg, 0)\n Ball{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m), PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(m, s^-1),ùêã*ùêì^-1,nothing}}}(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), 0.0 kg, 0)\n\njulia> assign_points(p_Ball, :Pos, pu)\n\njulia> p_Ball\n3-element Array{Ball{Int64},1}:\n Ball{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.6477898102542425 m, 0.4373299903072585 m, 0.7049677138795583 m), PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(m, s^-1),ùêã*ùêì^-1,nothing}}}(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), 0.0 kg, 0)\n Ball{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.8651944634833202 m, 0.5480460857713867 m, 0.5620548650425954 m), PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(m, s^-1),ùêã*ùêì^-1,nothing}}}(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), 0.0 kg, 0)\n Ball{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.28164175368241895 m, 0.1673360850328498 m, 0.31321825771349987 m), PVector{Quantity{Float64,ùêã*ùêì^-1,Unitful.FreeUnits{(m, s^-1),ùêã*ùêì^-1,nothing}}}(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), 0.0 kg, 0)\n\n\njulia> npconvert([1.0, 2.0, 3.0])\nPVector{Float64}(1.0, 2.0, 3.0)\n\njulia> npconvert([1.0u\"m\" 4.0u\"m\";\n                  2.0u\"m\" 5.0u\"m\";\n                  3.0u\"m\" 6.0u\"m\"])\n2-element Array{PVector,1}:\n PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(1.0 m, 2.0 m, 3.0 m)\n PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(4.0 m, 5.0 m, 6.0 m)","category":"page"},{"location":"manual/guide/#Extent-1","page":"Package Guide","title":"Extent","text":"","category":"section"},{"location":"manual/guide/#","page":"Package Guide","title":"Package Guide","text":"julia> p = [Ball(PVector(-1.0u\"m\", 1.0u\"m\", 1.0u\"m\"), PVector(u\"m\"), 1.0u\"kg\", 1),\n            Ball(PVector(1.0u\"m\", -1.0u\"m\", -1.0u\"m\"), PVector(u\"m\"), 1000.0u\"g\", 2)]\n2-element Array{Ball{Int64},1}:\n Ball{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(-1.0 m, 1.0 m, 1.0 m), PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m), 1.0 kg, 1)\n Ball{Int64}(PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(1.0 m, -1.0 m, -1.0 m), PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m), 1000.0 g, 2)\n\njulia> min_x(p)\n-1.0 m\n\njulia> max_z(p)\n1.0 m\n\njulia> center(p)\nPVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m)\n\njulia> mass_center(p)\nPVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m)\n\njulia> extent(p)\nExtent{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(-1.0 m, 1.0 m, -1.0 m, 1.0 m, -1.0 m, 1.0 m, 2.0 m, PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(0.0 m, 0.0 m, 0.0 m), PVector{Quantity{Float64,ùêã,Unitful.FreeUnits{(m,),ùêã,nothing}}}(-1.0 m, -1.0 m, -1.0 m))","category":"page"},{"location":"#PhysicalParticles.jl-1","page":"Home","title":"PhysicalParticles.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Support for physical vectors and particles (Astrophysics for now)","category":"page"},{"location":"#Package-Features-1","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Type and toolkit for 2D & 3D vectors, physical vectors and physical particles\nSupport basic mathematical calculations\nSupport clustering analysis and nearest neighbour searching","category":"page"},{"location":"#Manual-Outline-1","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n    \"manual/guide.md\",\n    \"manual/PVector.md\",\n    \"manual/Conversion.md\",\n    \"manual/Random.md\",\n    \"manual/Extent.md\",\n    \"manual/Neighbors.md\",\n    \"manual/Clustering.md\",\n]\nDepth = 1","category":"page"}]
}
