var documenterSearchIndex = {"docs":
[{"location":"manual/Extent/#Extent","page":"Extent","title":"Extent","text":"","category":"section"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"You can get Extent of an array of mathical vectors or particles by calling extent functions:","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"using PhysicalParticles\np = [Ball(PVector(-1.0u\"m\", 1.0u\"m\", 1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1.0u\"kg\", 1),\n     Ball(PVector(1.0u\"m\", -1.0u\"m\", -1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1000.0u\"g\", 2)]\nextent(p)","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"or by comparing two Extents and even array of Extents:","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"# 5 methods for generic function \"extent\":\n  [1] extent(a::Array{T,N}) where {N, T<:Union{AbstractParticle2D, PVector2D}}\n  [2] extent(a::Array{T,N}) where {N, T<:Union{AbstractParticle3D, PVector}}\n  [3] extent(a::Extent2D, b::Extent2D)\n  [4] extent(a::Extent, b::Extent)\n  [5] extent(a::Array{T,N} where N) where T<:AbstractExtent\n","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"For particles with masses, compute the mass center with:","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"mass_center(p)","category":"page"},{"location":"manual/Extent/#Minimum,-maximum-and-center","page":"Extent","title":"Minimum, maximum and center","text":"","category":"section"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"The computation of Extents are based on a series of small functions, we use p defined in previous section to demonstrate:","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"center(p)","category":"page"},{"location":"manual/Extent/","page":"Extent","title":"Extent","text":"We have implemented max_x, max_y, max_z, min_x, min_y, min_z, center, center_x, center_y, center_z for both points and particles. You could simply infer their functions by name.","category":"page"},{"location":"lib/Types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"manual/Conversion/#Conversion","page":"Conversion","title":"Conversion","text":"","category":"section"},{"location":"manual/Conversion/#Conversion-from-Arrays","page":"Conversion","title":"Conversion from Arrays","text":"","category":"section"},{"location":"manual/Conversion/","page":"Conversion","title":"Conversion","text":"pconvert is smart enough to handle 2D and 3D vectors at same time:","category":"page"},{"location":"manual/Conversion/","page":"Conversion","title":"Conversion","text":"using PhysicalParticles\npconvert([1.0, 2.0])\npconvert([1.0, 2.0, 3.0])\npconvert([1.0, 2.0, 3.0, 4.0])\na = pconvert([1.0 3.0; \n              2.0 4.0])\npconvert([1.0 4.0;\n          2.0 5.0;\n          3.0 6.0])\n","category":"page"},{"location":"manual/Conversion/#Assign-from-Arrays","page":"Conversion","title":"Assign from Arrays","text":"","category":"section"},{"location":"manual/Conversion/","page":"Conversion","title":"Conversion","text":"assign_particles takes in three paremeters: particles, symbol and points. Assignment of :Pos, :Vel and :Acc is enough for simulation tasks:","category":"page"},{"location":"manual/Conversion/","page":"Conversion","title":"Conversion","text":"pu = rand_pvector(3, u\"m\")\np_Ball = [Ball() for i=1:3]\nassign_particles(p_Ball, :Pos, pu)\np_Ball","category":"page"},{"location":"manual/Units/#Units","page":"Units","title":"Units","text":"","category":"section"},{"location":"manual/Units/","page":"Units","title":"Units","text":"Units are supported by Unitful.jl and UnitfulAstro.jl","category":"page"},{"location":"manual/Units/#Default-Units","page":"Units","title":"Default Units","text":"","category":"section"},{"location":"manual/Units/","page":"Units","title":"Units","text":"You could set preferred units by","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"const uSI = u\"m,s,A,K,cd,kg,mol\"\npreferunits(uSI)","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"or simply call si(). astro() and cgs() are implemented in the same way.","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"This would affect unit promotions in Unitful package and default outputs in related packages, by setting Unitful.promotion and PhysicalParticles.uDefaults respectively.","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"Examples to get basic units:","category":"page"},{"location":"manual/Units/","page":"Units","title":"Units","text":"using PhysicalParticles\ngetunits()\ngetunits(uAstro)\ngetunits(nothing)\ngetuLength()\ngetuTime(uSI)\ngetuCurrent(uCGS)\ngetuTemperature(nothing)\ngetuLuminosity()\ngetuMass()\ngetuAmount()","category":"page"},{"location":"manual/PVector/#PVector","page":"PVector","title":"PVector","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"All of the sub-types of Number and Quantity are supported. In general it works as we expected whereas there are too many possibilities to foresee. Mathematically vector operations, linear algebra, array conversions, neighbor searching, etc. are well documented in corresponding sections.","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"The vector types are immutable out of performance reason. ","category":"page"},{"location":"manual/PVector/#PVector-and-PVector2D","page":"PVector","title":"PVector and PVector2D","text":"","category":"section"},{"location":"manual/PVector/#Constructor","page":"PVector","title":"Constructor","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"It is assumed that 3D vectors are used more often, so we choose PVector to represent 3D vectors and provide user-friendly functions to avoid errors in case you missed suffix 2D:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"using PhysicalParticles\nPVector(1.0, 2.0)\nPVector(2.0, 3.0, u\"m\")","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"The default constructors of PVector are still 3d-version:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"PVector()\nPVector(u\"m\")","category":"page"},{"location":"manual/PVector/#Basic-Operators","page":"PVector","title":"Basic Operators","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"Basic maths are well support by overriding Base: +, -, *, /, and array operations are supported by overriding Base: length, iterate","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"a = pconvert(ones(3))\nb = pconvert(ones(3)) * 2\na + b\na * b\nnorm(a)\nnorm(a) == sqrt(3)\nnormalize(a)\nnormalize(a) == a / sqrt(3)\ncross(a, b)\ndot(a,b) == *(a,b)\nc = pconvert(ones(3)) * 1.0u\"m\"\nc * a","category":"page"},{"location":"manual/PVector/#More-types,-more-possibilities","page":"PVector","title":"More types, more possibilities","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"T<:Number gives us a whole world to try out new vector operations. As we mentioned above, the build-in type operation and promotion schemes have guaranteed most of operations would be correct:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"a = PVector(1.0, 1.0, 1.0) * im\na * PVector(1, 2, 3)\nnorm(a)\nb = PVector(1.0f0, 2.0f0)\nb * 2\nb * 2.0","category":"page"},{"location":"manual/PVector/#LinearAlgebra","page":"PVector","title":"LinearAlgebra","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"norm, normalize, dot, cross from LinearAlgebra module are overloaded.","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"However, when it comes to Quantity, some wierd things would happen:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"using Unitful\nsqrt(1.0u\"km\" * 1000.0u\"m\")\nsqrt(upreferred(1.0u\"km\" * 1000.0u\"m\"))\n1.0u\"km\" / sqrt(upreferred(1.0u\"km\" * 1.0u\"km\"))","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"To avoid this, we have to use upreferred in both norm and normalize:","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"@inline norm(p::PVector2D) = sqrt(upreferred(p * p))\n@inline normalize(p::PVector2D) = (n = ustrip(norm(p)); return PVector2D(upreferred(p.x/n), upreferred(p.y/n)))\n\n@inline norm(p::PVector) = sqrt(upreferred(p * p))\n@inline normalize(p::PVector) = (n = ustrip(norm(p)); return PVector(upreferred(p.x/n), upreferred(p.y/n), upreferred(p.z/n)))","category":"page"},{"location":"manual/PVector/#uconvert,-ustrip,-zero,-one","page":"PVector","title":"uconvert, ustrip, zero, one","text":"","category":"section"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"These would be useful when you cannot predict the type of input.","category":"page"},{"location":"manual/PVector/","page":"PVector","title":"PVector","text":"p = PVector(2.0, 2.0, 2.0, u\"km\")\nuconvert(u\"m\", p)\nustrip(u\"m\", p)\nustrip(p)\none(u\"m\", p)\none(p)\nzero(u\"m\", p)\nzero(p)","category":"page"},{"location":"manual/Clustering/#Clustering","page":"Clustering","title":"Clustering","text":"","category":"section"},{"location":"manual/Random/#Random","page":"Random","title":"Random","text":"","category":"section"},{"location":"manual/Random/","page":"Random","title":"Random","text":"Usage of random point generators is straightforward:","category":"page"},{"location":"manual/Random/","page":"Random","title":"Random","text":"using PhysicalParticles\np = rand_pvector(3)\npu = rand_pvector(3, u\"m\")","category":"page"},{"location":"manual/Random/","page":"Random","title":"Random","text":"Here is the list of supported generators:","category":"page"},{"location":"manual/Random/","page":"Random","title":"Random","text":"rand_pvector(n::Integer)\nrand_pvector(n::Integer, T::DataType)\nrand_pvector(n::Integer, u::Unitful.Units)\nrand_pvector(n::Integer, u::Unitful.Units, T::DataType)\n\nrand_pvector2d(n::Integer)\nrand_pvector2d(n::Integer, T::DataType)\nrand_pvector2d(n::Integer, u::Unitful.Units)\nrand_pvector2d(n::Integer, u::Unitful.Units, T::DataType)","category":"page"},{"location":"manual/Neighbors/#Neighbors","page":"Neighbors","title":"Neighbors","text":"","category":"section"},{"location":"manual/guide/#Package-Guide","page":"Package Guide","title":"Package Guide","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"PhysicalParticles.jl is useful for particle based scientific simulations","category":"page"},{"location":"manual/guide/#Installation","page":"Package Guide","title":"Installation","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"pkg> add PhysicalParticles","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"or add from git repository","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"pkg> add https://github.com/JuliaAstroSim/PhysicalParticles.jl","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"Test the package by","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"pkg> test PhysicalParticles","category":"page"},{"location":"manual/guide/#Basic-Usage","page":"Package Guide","title":"Basic Usage","text":"","category":"section"},{"location":"manual/guide/#Vectors","page":"Package Guide","title":"Vectors","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"using PhysicalParticles, UnitfulAstro\na = PVector()\nb = PVector(1.0u\"m\", 2.0u\"m\", 3.0u\"m\")\nc = PVector2D(u\"m/s\")\nPVector(1.0, 1.0) * im\nb * 2.0u\"s\"\nb + PVector(2.0, 2.0, 2.0, u\"m\") / 2\nnorm(PVector2D(3.0f0,4.0f0))\nnormalize(PVector(3.0, 4.0))\nd = PVector(3u\"kpc\", 4u\"kpc\")\nnorm(d)\ndistance(PVector2D(0.0, 0.0), PVector2D(3.0, 4.0))\nrotate(PVector(1.0, 0.0), 0.5pi)","category":"page"},{"location":"manual/guide/#Particles","page":"Package Guide","title":"Particles","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"We provide 2D version for each type below, for example, the 2D version of Ball is Ball2D:","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"Massless()\nMassless(PVector(0.0, 0.0, 0.0), PVector(), 1)\nMassless2D(uCGS)\nBall()\nBall(PVector(0.0u\"m\", 0.0u\"m\", 0.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 0.0u\"kg\", 1)\nStar()\nSPHGas()\na = Star(uAstro)\nb = SPHGas(uAstro)\ndistance(a,b)","category":"page"},{"location":"manual/guide/#Mutate-array-of-immutable-particles","page":"Package Guide","title":"Mutate array of immutable particles","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"To simulate particle dynamics on GPU (bit types), and for better performance, particle data are stored in immutable sturcts. One of the shortcomings is that you have to allocate a new object when changing member data, however, memory operation is optimized when doing this in array:","category":"page"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"using BangBang\np = Star()\np = setproperties!!(p, Mass = 321.0)\n\na = [Star()]\na[1] = setproperties!!(a[1], Mass = 321.0) # In general, `Mass` is mutated right at its original memory address.","category":"page"},{"location":"manual/guide/#Random-and-Conversion","page":"Package Guide","title":"Random and Conversion","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"p = rand_pvector(3)\npu = rand_pvector(3, u\"m\")\np_Ball = [Ball(uSI) for i=1:3]\nassign_particles(p_Ball, :Pos, pu)\np_Ball\npconvert([1.0, 2.0, 3.0])\npconvert([1.0u\"m\" 4.0u\"m\";\n          2.0u\"m\" 5.0u\"m\";\n          3.0u\"m\" 6.0u\"m\"])","category":"page"},{"location":"manual/guide/#Extent","page":"Package Guide","title":"Extent","text":"","category":"section"},{"location":"manual/guide/","page":"Package Guide","title":"Package Guide","text":"p = [Ball(PVector(-1.0u\"m\", 1.0u\"m\", 1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1.0u\"kg\", 1),\n     Ball(PVector(1.0u\"m\", -1.0u\"m\", -1.0u\"m\"), PVector(u\"m/s\"), PVector(u\"m/s^2\"), 1000.0u\"g\", 2)]\ncenter(p)\nmass_center(p)\nextent(p)","category":"page"},{"location":"lib/Methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"#PhysicalParticles.jl","page":"Home","title":"PhysicalParticles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Support for physical vectors and particles (Astrophysics for now)","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Type and toolkit for 2D & 3D vectors, physical vectors and physical particles\nSupport basic mathematical calculations\nSupport clustering analysis and nearest neighbour searching","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
